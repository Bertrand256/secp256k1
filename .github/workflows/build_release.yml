name: Build release workflow

on:
  push:
    tags:
    - '*'

jobs:

  create_release:
    runs-on: ubuntu-18.04
    name: Create github release
    outputs:
      upload_url: >
        ${{ steps.get_release.outputs.upload_url ||
            steps.create_release.outputs.upload_url }}
    steps:
      - name: Try to Get Release
        id: get_release
        uses: zebra-lucky/actions-js-getRelease@0.0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ github.ref }}
      - name: Create Release
        id: create_release
        if: ${{ !steps.get_release.outputs.upload_url }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

  build_osx:
    needs: create_release
    runs-on: macos-10.15
    name: create release for macOS
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set outputs for pkg_ver
        id: set_vars
        run: |
          source ./contrib/actions/version_env.sh
          echo "::set-output name=pkg_ver::$(echo $LIB_VERSION)"
      - name: Prepare build
        env:
          LIB_VERSION: ${{ steps.set_vars.outputs.pkg_ver }}
        run: |
          ./contrib/actions/install-osx.sh
      - name: Build dmg
        env:
          LIB_VERSION: ${{ steps.set_vars.outputs.pkg_ver }}
        run: |
          mkdir -p build
          ./contrib/actions/script-osx.sh
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: build/libsecp256k1-${{ steps.set_vars.outputs.pkg_ver }}-osx.tgz
          asset_name: libsecp256k1-${{ steps.set_vars.outputs.pkg_ver }}-osx.tgz
          asset_content_type: application/gzip

  build_win:
    needs: create_release
    runs-on: ubuntu-18.04
    name: create release for Win
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set outputs for pkg_ver
        id: set_vars
        run: |
          source ./contrib/actions/version_env.sh
          echo "::set-output name=pkg_ver::$(echo $LIB_VERSION)"
      - name: Prepare build
        env:
          LIB_VERSION: ${{ steps.set_vars.outputs.pkg_ver }}
        run: |
          ./contrib/actions/install-linux.sh
      - name: Build Linux/Win
        env:
          LIB_VERSION: ${{ steps.set_vars.outputs.pkg_ver }}
        run: |
          mkdir -p build
          ./contrib/actions/script-linux.sh
      - name: Upload Win32 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: build/libsecp256k1-${{ steps.set_vars.outputs.pkg_ver }}-win32.zip
          asset_name: libsecp256k1-${{ steps.set_vars.outputs.pkg_ver }}-win32.zip
          asset_content_type: application/x-zip-compressed
      - name: Upload Win64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: build/libsecp256k1-${{ steps.set_vars.outputs.pkg_ver }}-win64.zip
          asset_name: libsecp256k1-${{ steps.set_vars.outputs.pkg_ver }}-win64.zip
          asset_content_type: application/x-zip-compressed

  upload_notify_artifact:
    runs-on: ubuntu-18.04
    if: always()
    name: Upload Notify Artifact
    steps:
      - name: Upload Notify Artifact
        uses: zebra-lucky/actions-js-slackJobsStatus@0.0.2
        with:
          gh_ctx: ${{ toJson(github) }}
